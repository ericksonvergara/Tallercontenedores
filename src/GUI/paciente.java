/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tallercontenedores.contenedor_paciente;
import tallercontenedores.Archivo;
import tallercontenedores.Conexion;

/**
 *
 * @author SENA
 */
public class paciente extends javax.swing.JFrame {
    public static java.util.ArrayList pac = new java.util.ArrayList<>();
    public static contenedor_paciente pac2 = null;
    private DefaultTableModel model;

    /**
     * Creates new form paciente
     */
    public paciente() {
        initComponents();
        setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cedula = new javax.swing.JTextField();
        nombre = new javax.swing.JTextField();
        edad = new javax.swing.JTextField();
        telefono = new javax.swing.JTextField();
        agregar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        enviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_paciente = new javax.swing.JTable();
        exportar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(485, 450));
        setPreferredSize(new java.awt.Dimension(472, 378));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setText("Cedula:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(111, 56, 60, 16);

        jLabel2.setText("Nombre:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(108, 94, 60, 16);

        jLabel3.setText("Edad:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(110, 132, 50, 16);

        jLabel4.setText("Telefono:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(110, 170, 80, 16);

        cedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cedulaActionPerformed(evt);
            }
        });
        getContentPane().add(cedula);
        cedula.setBounds(206, 45, 140, 30);
        getContentPane().add(nombre);
        nombre.setBounds(208, 83, 140, 30);
        getContentPane().add(edad);
        edad.setBounds(206, 121, 140, 30);
        getContentPane().add(telefono);
        telefono.setBounds(206, 159, 140, 30);

        agregar.setText("agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar);
        agregar.setBounds(20, 220, 73, 25);

        modificar.setText("modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar);
        modificar.setBounds(110, 220, 83, 25);

        buscar.setText("buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar);
        buscar.setBounds(210, 220, 67, 25);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("PACIENTE");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(164, 18, 74, 17);

        enviar.setText("mostrar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });
        getContentPane().add(enviar);
        enviar.setBounds(290, 220, 73, 25);

        tabla_paciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre", "Edad", "Telefono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla_paciente);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 275, 452, 96);

        exportar.setText("Exportar");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });
        getContentPane().add(exportar);
        exportar.setBounds(380, 220, 77, 25);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\ERICK\\Documents\\NetBeansProjects\\Tallercontenedores\\src\\iconos\\paciente.jpg")); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(0, 0, 470, 420);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        try {
            // TODO add your handling code here:
            long ced = Long.parseLong(cedula.getText().trim());
            String nom = nombre.getText().trim();
            int ed = Integer.parseInt(edad.getText().trim());
            long tel = Long.parseLong(telefono.getText().trim());

            //contenedor_paciente pac1 = new contenedor_paciente(ced, nom, ed, tel);

            //pac.add(pac1);

            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "INSERT INTO paciente VALUES(" + ced + ",'" + nom + "'," + ed + "," + tel + ")";
            JOptionPane.showMessageDialog(this, "Registro exitoso!");
            con.actualizar(query);
            con.cerrar();

            cedula.setText(null);
            nombre.setText(null);
            edad.setText(null);
            telefono.setText(null);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        try {
            // TODO add your handling code here:
//        pac2.setNombre(nombre.getText().trim());
//        pac2.setEdad(Integer.parseInt(edad.getText().trim()));
//        pac2.setTelefono(Integer.parseInt(telefono.getText().trim()));

            Conexion con = new Conexion();
            con.ConexionPostgres();
             String query = "UPDATE paciente SET nombre_paciente = '" + nombre.getText() + "', edad_paciente="+Integer.parseInt(edad.getText().trim())+","
                     + " telefono_paciente="+Integer.parseInt(telefono.getText().trim())+" WHERE cedula_paciente = " + Integer.parseInt(cedula.getText());
            JOptionPane.showMessageDialog(this, "Modificacion exitosa!");
            con.actualizar(query);
            con.cerrar();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        try {
            // TODO add your handling code here:
            int ced = Integer.parseInt(cedula.getText().trim());

            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM paciente WHERE cedula_paciente =" + ced;
            ResultSet rs = con.consultar(query);

            if (rs.next()) {
                nombre.setText(rs.getString("nombre_paciente"));
                edad.setText(rs.getString("edad_paciente"));
                telefono.setText(rs.getString("telefono_paciente"));
                JOptionPane.showMessageDialog(this, "busqueda Exitosa!.");
            } else {
                JOptionPane.showMessageDialog(this, "No existe el Paciente!");
            }

            con.cerrar();

            /*
            boolean buscar = false;
            contenedor_paciente p = null;
            
            for(int i =0; i<pac.size(); i++)
            {
            pac2 = (contenedor_paciente)pac.get(i);
            
            if(ced==pac2.getCedula())
            {
            buscar = true;
            break;
            }
            }
            
            if(buscar)
            {
            nombre.setText(pac2.getNombre());
            edad.setText(String.valueOf(pac2.getEdad()));
            telefono.setText(String.valueOf(pac2.getTelefono()));
            }else{
            JOptionPane.showMessageDialog(null,"No existen datos!","ERROR",JOptionPane.ERROR_MESSAGE);
            }
             */ } catch (ClassNotFoundException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        try {
            // TODO add your handling code here:
            //datos.setText(null);

            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM paciente ORDER BY cedula_paciente DESC";
            java.sql.ResultSet rs = con.consultar(query);

            String data[][] = {};
            String col[] = {"CEDULA", "NOMBRE", "EDAD", "TELEFONO"};
            model = new DefaultTableModel(data, col);
            tabla_paciente.setModel(model);
            int con1 = 0;

            while (rs.next()) {
                model.insertRow(con1, new Object[]{}); //INSERTA FILA EN TIEMPO DE EJECUCION
                model.setValueAt(rs.getLong("cedula_paciente"), con1, 0);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(rs.getString("nombre_paciente"), con1, 1);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(rs.getInt("edad_paciente"), con1, 2);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(rs.getLong("telefono_paciente"), con1, 3);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
            }
            /*
            for(int i =0; i<pac.size(); i++)
            {
                contenedor_paciente p = (contenedor_paciente)pac.get(i);
                //datosA.setText( datosA.getText() + a.getNombreA() + "\t" + a.getId() + "\n" );
                model.insertRow(con1,new Object[]{}); //INSERTA FILA EN TIEMPO DE EJECUCION
                model.setValueAt(p.getCedula(), con1, 0);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(p.getNombre(), con1, 1);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(p.getEdad(), con1, 2);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(p.getTelefono(), con1, 3);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                
                //nombre" + "\t" + "Edad " + "\t" + "Telefono" + "\n" + p.getCedula() + "\t" + p.getNombre() + "\t" + p.getEdad() + "\t" + p.getTelefono() + "\n" + "  " + "\n");
                
            }
             */
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_enviarActionPerformed

    private void cedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cedulaActionPerformed

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed
        try {
            // TODO add your handling code here:
            /*
            String cad="Cedula \t Nombre \t Edad \t Telefono \n";
            
            for(int i =0; i<pac.size(); i++){
            contenedor_paciente p = (contenedor_paciente)pac.get(i);
            cad+= p.getCedula() + "\t" + p.getNombre() + "\t" + p.getEdad() + "\t" + p.getTelefono() + "\n";
            
            }
            
            Archivo.grabar("Pacientes.xls", cad);
             */

            Document documento = new Document();
            String ruta = System.getProperty("user.home");
            try {
                try {
                    PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/reporte_paciente.pdf"));
                } catch (DocumentException ex) {
                    Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
            }

            documento.open();
            PdfPTable tabla = new PdfPTable(4);
            tabla.addCell("Cedula");
            tabla.addCell("Nombre");
            tabla.addCell("Edad");
            tabla.addCell("Telefono");

            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM paciente";
            java.sql.ResultSet rs = con.exportar(query);

            if (rs.next()) {

                while (rs.next()) {
                    tabla.addCell(rs.getString(1));
                    tabla.addCell(rs.getString(2));
                    tabla.addCell(rs.getString(3));
                    tabla.addCell(rs.getString(4));
                }
                try {
                    documento.add(tabla);
                } catch (DocumentException ex) {
                    Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            con.cerrar();
            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte Creado!.");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(paciente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(paciente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new paciente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField cedula;
    private javax.swing.JTextField edad;
    private javax.swing.JButton enviar;
    private javax.swing.JButton exportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField nombre;
    private javax.swing.JTable tabla_paciente;
    private javax.swing.JTextField telefono;
    // End of variables declaration//GEN-END:variables
}
