/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import tallercontenedores.contenedor_area;
import tallercontenedores.contenedor_doctor;
import static GUI.area.are;
import static GUI.area.are2;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import tallercontenedores.Archivo;
import tallercontenedores.Conexion;
/**
 *
 * @author SENA
 */
public class doctor extends javax.swing.JFrame {

    public static java.util.ArrayList doc = new java.util.ArrayList<>();
    public static contenedor_doctor doc2 = null;
    public static String opcion = null;
    private DefaultTableModel model; // ATRIBUTO DE CLASE
    

    /**
     * Creates new form doctor
     */
    public doctor() {
         initComponents();  
         
        try {
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM area ORDER BY codigo_area";

            ResultSet rs = con.consultar(query);

            while (rs.next()) {
                area_d.addItem(rs.getInt("codigo_area") + "-" + rs.getString("especialidad_area"));
            }

            area_d.setEnabled(false);
            con.cerrar();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cedula = new javax.swing.JTextField();
        nombre = new javax.swing.JTextField();
        telefono = new javax.swing.JTextField();
        tipo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        area_d = new javax.swing.JComboBox<>();
        agregar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        buscar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        enviar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_doctor = new javax.swing.JTable();
        exportar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        jTextField2.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(553, 435));
        setMinimumSize(new java.awt.Dimension(450, 450));
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("DOCTOR");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(170, 0, 61, 17);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Cedula:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(123, 40, 50, 20);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Nombre:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(119, 70, 60, 16);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Telefono:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(123, 100, 60, 16);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Tipo:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(138, 130, 40, 16);
        getContentPane().add(cedula);
        cedula.setBounds(190, 38, 77, 20);

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });
        getContentPane().add(nombre);
        nombre.setBounds(190, 68, 77, 20);
        getContentPane().add(telefono);
        telefono.setBounds(190, 98, 80, 20);

        tipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Medico General", "Especialista" }));
        tipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoActionPerformed(evt);
            }
        });
        getContentPane().add(tipo);
        tipo.setBounds(190, 130, 98, 20);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Area:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(140, 160, 40, 16);

        area_d.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        area_d.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                area_dActionPerformed(evt);
            }
        });
        getContentPane().add(area_d);
        area_d.setBounds(190, 160, 80, 20);

        agregar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        agregar.setText("agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar);
        agregar.setBounds(3, 190, 80, 25);

        modificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        modificar.setText("modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });
        getContentPane().add(modificar);
        modificar.setBounds(93, 190, 90, 25);

        buscar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buscar.setText("buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar);
        buscar.setBounds(207, 190, 70, 25);

        eliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        eliminar.setText("eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(eliminar);
        eliminar.setBounds(315, 190, 80, 25);

        enviar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        enviar.setText("mostrar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });
        getContentPane().add(enviar);
        enviar.setBounds(83, 230, 80, 25);

        tabla_doctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre", "Telefono", "Tipo", "Area"
            }
        ));
        jScrollPane2.setViewportView(tabla_doctor);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 270, 410, 130);

        exportar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        exportar.setText("exportar");
        exportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarActionPerformed(evt);
            }
        });
        getContentPane().add(exportar);
        exportar.setBounds(240, 230, 90, 25);
        getContentPane().add(jLabel7);
        jLabel7.setBounds(-10, 0, 460, 0);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void area_dActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_area_dActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_area_dActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
                
         try {
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String item3 = (String) area_d.getSelectedItem();
            java.util.StringTokenizer st = new java.util.StringTokenizer(item3, "-");
            String codigoarea = st.nextToken();

            String item1 = (String) tipo.getSelectedItem();
            if (item1.equals("Medico General")) {

                String query = "insert into doctor values(" + Integer.parseInt(cedula.getText().trim()) + ",'" + nombre.getText().trim() + "'," + Integer.parseInt(telefono.getText().trim()) + ",'" + tipo.getSelectedItem() + "'," + "0)";
                JOptionPane.showMessageDialog(this, "Registro exitoso");
                con.actualizar(query);
            }

            String item2 = (String) tipo.getSelectedItem();
            if (item2.equals("Especialista")) {

                String query = "insert into doctor values(" + Integer.parseInt(cedula.getText().trim()) + ",'" + nombre.getText().trim() + "'," + Integer.parseInt(telefono.getText().trim()) + ",'" + tipo.getSelectedItem() + "'," + Integer.parseInt(codigoarea.trim()) + ")";
                JOptionPane.showMessageDialog(this, "Registro exitoso");
                con.actualizar(query);
            }
            con.cerrar();
            cedula.setText(null);
            nombre.setText(null);
            telefono.setText(null);
            tipo.setSelectedItem("Seleccione");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }

//    String opcion1=(String)tipo.getSelectedItem(); 
//    if(opcion1.equals("General")){
//    String nom = nombre.getText().trim();
//    int ced = Integer.parseInt(cedula.getText().trim());
//    int tel = Integer.parseInt(telefono.getText().trim());
//    String tipod = (String) tipo.getSelectedItem();
//    String espe = "";
//    contenedor_doctor d1 = new contenedor_doctor(ced, nom, tel, tipod, espe);
//    doc.add(d1);
//    }
//        
//    String opcion2=(String)tipo.getSelectedItem(); 
//    if(opcion2.equals("Especialista")){
//    String nom = nombre.getText().trim();
//    int ced = Integer.parseInt(cedula.getText().trim());
//    int tel = Integer.parseInt(telefono.getText().trim());
//    String tipod = (String) tipo.getSelectedItem();
//    String espe = (String) area_d.getSelectedItem();
//    contenedor_doctor d1 = new contenedor_doctor(ced, nom, tel, tipod, espe);
//    doc.add(d1);
//    }
//    cedula.setText(null);
//    nombre.setText(null);
//    telefono.setText(null);
//    tipo.setSelectedItem("Seleccione");
        
    }//GEN-LAST:event_agregarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        // TODO add your handling code here:
        //doc2.setNombre(nombre.getText().trim());
        //doc2.setTelefono(Integer.parseInt(telefono.getText().trim()));
        
        String item3 = (String) area_d.getSelectedItem();
        java.util.StringTokenizer st = new java.util.StringTokenizer(item3, "-");
        String codigoarea = st.nextToken();

        try {
            Conexion con = new Conexion();
            con.ConexionPostgres();

            String item1 = (String) tipo.getSelectedItem();
            if (item1.equals("Medico General")) {

                String query = "UPDATE  doctor SET nombre_doctor='" + nombre.getText().trim() + "',telefono_doctor=" + Integer.parseInt(telefono.getText().trim()) + ",tipo_doctor='" + tipo.getSelectedItem() + "'," + "especialidad_doctor=0 WHERE cedula_doctor =" + Integer.parseInt(cedula.getText().trim());
                JOptionPane.showMessageDialog(this, "Modificación Exitosa!");
                con.actualizar(query);
            }

            String item2 = (String) tipo.getSelectedItem();
            if (item2.equals("Especialista")) {

                String query = "UPDATE  doctor SET nombre_doctor='" + nombre.getText().trim() + "',telefono_doctor=" + Integer.parseInt(telefono.getText().trim()) + ",tipo_doctor='" + tipo.getSelectedItem() + "'," + "especialidad_doctor=" + Integer.parseInt(codigoarea) + " WHERE cedula_doctor =" + Integer.parseInt(cedula.getText().trim());
                JOptionPane.showMessageDialog(this, "Modificación Exitosa!");
                con.actualizar(query);
            }

            //JOptionPane.showMessageDialog(this, "Modificación Exitosa!");
            con.cerrar();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        // TODO add your handling code here:
         //datos.setText(null);
         
         int con1 = 0;
        try {
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM doctor ORDER BY cedula_doctor";

            java.sql.ResultSet rs = con.consultar(query);

            String data[][] = {};
            String col[] = {"Cedula", "Nombre", "Telefono", "Tipo", "Area"};
            model = new DefaultTableModel(data, col);
            tabla_doctor.setModel(model);

            while (rs.next()) {
                model.insertRow(con1, new Object[]{}); //INSERTA FILA EN TIEMPO DE EJECUCION
                model.setValueAt(rs.getInt("cedula_doctor"), con1, 0);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
                model.setValueAt(rs.getString("nombre_doctor"), con1, 1);
                model.setValueAt(rs.getInt("telefono_doctor"), con1, 2);
                model.setValueAt(rs.getString("tipo_doctor"), con1, 3);
                model.setValueAt(rs.getInt("especialidad_doctor"), con1, 4);

            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
         
//         String data[][] = {};
//         String col[] = {"Cedula","Nombre","Telefono","Tipo","Area"};
//         model = new DefaultTableModel(data,col);
//         tabla_doctor.setModel(model);
//         int con1=0;
//        for(int i =0; i<doc.size(); i++)
//        {
//         contenedor_doctor d = (contenedor_doctor)doc.get(i);
//         //datos.setText( datos.getText() + d.getCedeula()+ "\t" + d.getNombre() + "\t" + d.getTelefono() + "\t" + d.getEspecialista() + "\n" + "  " + "\n");
//         model.insertRow(con1,new Object[]{}); //INSERTA FILA EN TIEMPO DE EJECUCION
//         model.setValueAt(d.getCedeula(), con1, 0);  // ACTUALIZA LA CELDA CON EL VALOR DE CAMPO OBTENIDO
//         model.setValueAt(d.getNombre(), con1, 1);
//         model.setValueAt(d.getTelefono(), con1, 2);
//         model.setValueAt(d.getGeneral(), con1, 3);
//         model.setValueAt(d.getEspecialista(), con1, 4);
//         con1++;
    }//GEN-LAST:event_enviarActionPerformed
   
    private void tipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoActionPerformed
        // TODO add your handling code here:
        String op = (String) tipo.getSelectedItem();

        if (op.equals("Especialista")) {
            area_d.setEnabled(true);
        }
        if (op.equals("Seleccione")) {
            area_d.setEnabled(false);
        }
        if (op.equals("Medico General")) {
            area_d.setSelectedItem("Seleccione");
            area_d.setEnabled(false);
        }
        
//        contenedor_area are2= null;
//        String op=(String)tipo.getSelectedItem();
//        if(op.equals("Especialista"))
//        {
//            area_d.removeAllItems();
//        for(int i=0; i<area.are.size();i++)
//        {   are2=(contenedor_area)are.get(i);
//            area_d.addItem(are2.getNombreA());
//            }
//                }
//        else{
//            area_d.removeAllItems();
//        }
        //opcion = (String) tipo.getSelectedItem();
    }//GEN-LAST:event_tipoActionPerformed

    private void exportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarActionPerformed
        // TODO add your handling code here:
        /*
        String cad="Cedula \t Nombre \t Telefono \t Tipo \t Area \n";        
        for(int i =0; i<doc.size(); i++){
        contenedor_doctor d = (contenedor_doctor)doc.get(i);
        cad+= d.getCedeula()+ "\t" + d.getNombre() + "\t" + d.getTelefono() + "\t" + d.getGeneral() + "\t" + d.getEspecialista() + "\n";
    
     }     
        Archivo.grabar("doctor.xls", cad);
        */
        
        Document documento = new Document();
        String ruta = System.getProperty("user.home");
        try {
            try {
                PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/reporte_Doctor.pdf"));
            } catch (DocumentException ex) {
                Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }

        documento.open();
        PdfPTable tabla = new PdfPTable(5);
        tabla.addCell("Cedula");
        tabla.addCell("Nombre");
        tabla.addCell("Telefono");
        tabla.addCell("Tipo");
        tabla.addCell("Especialidad");

        try {
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM doctor";
            java.sql.ResultSet rs = con.exportar(query);

            if (rs.next()) {
                while (rs.next()) {
                    tabla.addCell(rs.getString(1));
                    tabla.addCell(rs.getString(2));
                    tabla.addCell(rs.getString(3));
                    tabla.addCell(rs.getString(4));
                    tabla.addCell(rs.getString(5));
                }
                try {
                    documento.add(tabla);
                } catch (DocumentException ex) {
                    Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            con.cerrar();
            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte Creado!.");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportarActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        // TODO add your handling code here:
        int ced = Integer.parseInt(cedula.getText().trim());
        //int tel = Integer.parseInt(telefono.getText().trim());

        try {
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM doctor WHERE cedula_doctor=" + ced;
            ResultSet rs = con.consultar(query);

            if (rs.next()) {
                nombre.setText(rs.getString("nombre_doctor"));
                telefono.setText(rs.getString("telefono_doctor"));
                tipo.setSelectedItem(rs.getString("tipo_doctor"));
                area_d.setSelectedItem(rs.getString("especialidad_doctor"));
            } else {
                JOptionPane.showMessageDialog(null, "No existen datos!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            con.cerrar();
            /*boolean buscar = false;
             contenedor_doctor buscar_d = null;
             
             for(int i =0; i<doc.size(); i++)
             {
             doc2 = (contenedor_doctor)doc.get(i);
             
             if(ced==doc2.getCedeula())
             {
             buscar = true;
             break;
             }
             }
             
             if(buscar)
             {
             nombre.setText(doc2.getNombre());
             telefono.setText(String.valueOf(doc2.getTelefono()));
             tipo.setSelectedItem("general");
             area_d.setSelectedItem("Especialista");
             }else{
             JOptionPane.showMessageDialog(null,"No existen datos!","ERROR",JOptionPane.ERROR_MESSAGE);
             }*/
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:       
         try {
            int fila = tabla_doctor.getSelectedRow();
            String cod = "";
            cod = tabla_doctor.getValueAt(fila, 0).toString();

            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "DELETE FROM docotr WHERE cedula_doctor =" + Integer.parseInt(cedula.getText()) + "";
            JOptionPane.showMessageDialog(this, "El registro ha sido Eliminado!");
            con.eliminar(query);
            con.cerrar();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(doctor.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }//GEN-LAST:event_eliminarActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(doctor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new doctor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JComboBox<String> area_d;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField cedula;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton enviar;
    private javax.swing.JButton exportar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton modificar;
    private javax.swing.JTextField nombre;
    private javax.swing.JTable tabla_doctor;
    private javax.swing.JTextField telefono;
    private javax.swing.JComboBox<String> tipo;
    // End of variables declaration//GEN-END:variables
}
