/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import static GUI.area.are;
import static GUI.doctor.doc;
import javax.swing.JOptionPane;
import tallercontenedores.contenedor_salida;
import tallercontenedores.contenedor_ingreso;
import static GUI.ingreso.ingreso;
import static GUI.ingreso.ingreso2;
import static GUI.paciente.pac;
import static GUI.paciente.pac2;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import tallercontenedores.Conexion;
import tallercontenedores.contenedor_area;
import tallercontenedores.contenedor_doctor;
import tallercontenedores.contenedor_paciente;



/**
 *
 * @author SENA
 */
public class salida extends javax.swing.JFrame {
    public static java.util.ArrayList salida = new java.util.ArrayList();
    public static contenedor_salida salida2 = null;
    private DefaultTableModel model;
    
    public static String patron = "dd/MMM/yyyy";
    public static String sfecha;
    public static String sfecha2;
    public static DateFormat formato1;
    

    /**
     * Creates new form salida
     */
    public salida() {
        try {
            initComponents();
            
            Conexion con = new Conexion();
            con.ConexionPostgres();
            
            String query = "SELECT * FROM doctor ORDER BY especialidad_doctor";

            ResultSet rs = con.consultar(query);

            while (rs.next()) {
                nombre_doctor.addItem(rs.getInt("especialidad_doctor") + "-" + rs.getString("nombre_doctor"));
            }

            nombre_doctor.setEnabled(true);
            con.cerrar();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cedula_paciente = new javax.swing.JTextField();
        nombre_paciente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fecha_ingreso = new com.toedter.calendar.JDateChooser();
        modificar = new javax.swing.JButton();
        agregar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        fecha_salida = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        enviar = new javax.swing.JButton();
        exportar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_salida = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        estado_paciente = new javax.swing.JComboBox<>();
        nombre_doctor = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jLabel2.setText("SALIDA DEL PACIENTE");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(273, 11, 139, 18);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("cedula del paciente:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 70, 120, 14);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Nombre del paciente:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(310, 70, 119, 14);
        getContentPane().add(cedula_paciente);
        cedula_paciente.setBounds(138, 70, 150, 22);

        nombre_paciente.setEditable(false);
        nombre_paciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombre_pacienteActionPerformed(evt);
            }
        });
        getContentPane().add(nombre_paciente);
        nombre_paciente.setBounds(430, 70, 150, 22);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Fecha de ingreso:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(20, 110, 110, 14);
        getContentPane().add(fecha_ingreso);
        fecha_ingreso.setBounds(138, 110, 150, 22);

        modificar.setText("Modificar");
        getContentPane().add(modificar);
        modificar.setBounds(140, 330, 83, 25);

        agregar.setText("Agregar");
        agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarActionPerformed(evt);
            }
        });
        getContentPane().add(agregar);
        agregar.setBounds(40, 330, 75, 25);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Fecha de salida:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(310, 110, 100, 20);
        getContentPane().add(fecha_salida);
        fecha_salida.setBounds(430, 110, 150, 22);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Nombre del Doctor:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(20, 160, 108, 14);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Valor a pagar");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(180, 230, 80, 14);

        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });
        getContentPane().add(total);
        total.setBounds(310, 230, 76, 22);

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        getContentPane().add(buscar);
        buscar.setBounds(230, 330, 67, 25);

        eliminar.setText("Eliminar");
        getContentPane().add(eliminar);
        eliminar.setBounds(320, 330, 75, 25);

        enviar.setText("Mostrar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });
        getContentPane().add(enviar);
        enviar.setBounds(410, 330, 73, 25);

        exportar.setText("exportar");
        getContentPane().add(exportar);
        exportar.setBounds(500, 330, 80, 25);

        tabla_salida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre", "Doctor", "Estado", "Fecha ingreso", "Fecha salida", "Total"
            }
        ));
        jScrollPane2.setViewportView(tabla_salida);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 390, 580, 120);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Estado del paciente:");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(310, 150, 130, 15);

        estado_paciente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Observacion", "Tratamiento", "U.C.I" }));
        getContentPane().add(estado_paciente);
        estado_paciente.setBounds(450, 150, 130, 22);

        nombre_doctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "seleccione" }));
        nombre_doctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombre_doctorActionPerformed(evt);
            }
        });
        getContentPane().add(nombre_doctor);
        nombre_doctor.setBounds(140, 160, 150, 22);
        getContentPane().add(jLabel11);
        jLabel11.setBounds(0, 0, 630, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void nombre_pacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombre_pacienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombre_pacienteActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        try {
            // TODO add your handling code here:
            int ced = Integer.parseInt(cedula_paciente.getText().trim());
            
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM ingreso WHERE cedula_paciente =" + ced;
            ResultSet rs = con.consultar(query);

            if (rs.next()) {
                nombre_paciente.setText(rs.getString("nombre_paciente"));
                fecha_ingreso.setDate(rs.getDate("fecha_ingreso"));
            } else {
                JOptionPane.showMessageDialog(this, "No existe el Paciente!");
            }

            con.cerrar();
            
            /*
            boolean buscar = false;
            contenedor_ingreso ingreso_s = null;
            //contenedor_ingreso in = null;
            
            for(int i =0; i<ingreso.size(); i++)
            {
            ingreso2 = (contenedor_ingreso)ingreso.get(i);
            
            if(ced==ingreso2.getCedula())
            {
            buscar = true;
            break;
            }
            }
            
            if(buscar)
            {
            nombre_paciente.setText(pac2.getNombre());
            fecha_ingreso.setDate(ingreso2.getFecha_ingreso());
            }else{
            JOptionPane.showMessageDialog(null,"No existen datos!","ERROR",JOptionPane.ERROR_MESSAGE);
            }
            */
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buscarActionPerformed

    private void agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarActionPerformed
        // TODO add your handling code here:
        try {
             Conexion con = new Conexion();
            con.ConexionPostgres();
            
            int ced = Integer.parseInt(cedula_paciente.getText().trim());
            //long total_pagar = Long.parseLong(total.getText().trim());
            
            formato1 = DateFormat.getDateInstance();
            sfecha = formato1.format(fecha_ingreso.getDate());
            sfecha2 = formato1.format(fecha_salida.getDate());
            
            String item3 = (String) nombre_doctor.getSelectedItem();
            java.util.StringTokenizer st = new java.util.StringTokenizer(item3, "-");
            String cedula_doc = st.nextToken();
            String nom_doc = st.nextToken();
            
            long tiempo_hospitalizado = fecha_ingreso.getDate().getTime()-fecha_salida.getDate().getTime();
            long dias = tiempo_hospitalizado / (1000 * 60 * 60 * 24);
            
            String estps = (String) estado_paciente.getSelectedItem();
            
            
            if(estps.equals("Observacion")){
                 long total_dias=dias*50000;
                 String query = "INSERT INTO salida VALUES("+ced+",'"+nombre_paciente.getText()+"','"+sfecha+"','"+sfecha2+"','"+nom_doc+"','"+estado_paciente.getSelectedItem()+"',"+total_dias+")";
                 JOptionPane.showMessageDialog(this, "registro Exitoso!");
                 JOptionPane.showMessageDialog(this, "registro Exitoso!"+tiempo_hospitalizado);
                 con.actualizar(query);
            }
            
            if(estps.equals("Tratamiento")){
                long total_dias=dias*100000;
                String query = "INSERT INTO salida VALUES("+ced+",'"+nombre_paciente.getText()+"','"+sfecha+"','"+sfecha2+"','"+nom_doc+"','"+estado_paciente.getSelectedItem()+"',"+total_dias+")";
                JOptionPane.showMessageDialog(this, "registro Exitoso!");
                JOptionPane.showMessageDialog(this, "registro Exitoso!"+tiempo_hospitalizado);
                con.actualizar(query);
            }
            
            if(estps.equals("U.C.I")){
                long total_dias=dias*200000;                
                String query = "INSERT INTO salida VALUES("+ced+",'"+nombre_paciente.getText()+"','"+sfecha+"','"+sfecha2+"','"+nom_doc+"','"+estado_paciente.getSelectedItem()+"',"+total_dias+")";
                JOptionPane.showMessageDialog(this, "registro Exitoso!");
                JOptionPane.showMessageDialog(this, "registro Exitoso!"+tiempo_hospitalizado);
                con.actualizar(query);
            }
            
            
//            String total_dias = null;
//            
//            total.setText(total_dias);
              
            con.cerrar();
            
            /*
            String nombre_paciente = pac2.getNombre().trim();
            boolean saber = false;
            contenedor_salida salida_a = null;
            
            for(int i =0; i<ingreso.size(); i++)
            {
            ingreso2=(contenedor_ingreso)ingreso.get(i);
            
            if(ced==ingreso2.getCedula());
            {
            saber = true;
            break;
            }
            }
            if(saber)
            {
            fecha_salida.setDate(salida2.getFecha_salida());
            String nombre = (String) nombre_doctor.getSelectedItem();
            //contenedor_salida sali = new contenedor_ingreso();
            //salida.add(sali);
            }else{
            
            }
            //cedula.setText(null);
            //nombre.setText(nombre_paciente);
            //fecha_i.setDate(null);
            */
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_agregarActionPerformed

    private void nombre_doctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombre_doctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombre_doctorActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        // TODO add your handling code here:
        int con1 = 0;
        try {
            
            
            
            
            Conexion con = new Conexion();
            con.ConexionPostgres();
            String query = "SELECT * FROM salida ORDER BY cedula_paciente";
            
            ResultSet rs = con.consultar(query);
            
            String data[][] = {};
            String col[] = {"Cedula", "Nombre", "Doctor", "Estado", "Fecha Ingreso", "Fecha Salida", "Total"};
            model = new DefaultTableModel(data, col);
            tabla_salida.setModel(model);
            
            while(rs.next()){
                model.insertRow(con1, new Object[]{});
                model.setValueAt(rs.getInt("cedula_paciente"), con1, 0);
                model.setValueAt(rs.getString("nombre_paciente"), con1, 1);
                model.setValueAt(rs.getDate("fecha_ingreso"), con1, 2);
                model.setValueAt(rs.getDate("fecha_salida"), con1, 3);
                model.setValueAt(rs.getString("nombre_doctor"), con1, 4);
                model.setValueAt(rs.getString("estado_paciente"), con1, 5);
                model.setValueAt(rs.getInt("valor_pagar"), con1, 6);
                con1++;
            }
            con.cerrar();
                    
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(salida.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_enviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(salida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new salida().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregar;
    private javax.swing.JButton buscar;
    private javax.swing.JTextField cedula_paciente;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton enviar;
    private javax.swing.JComboBox<String> estado_paciente;
    private javax.swing.JButton exportar;
    private com.toedter.calendar.JDateChooser fecha_ingreso;
    private com.toedter.calendar.JDateChooser fecha_salida;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modificar;
    private javax.swing.JComboBox<String> nombre_doctor;
    private javax.swing.JTextField nombre_paciente;
    private javax.swing.JTable tabla_salida;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
